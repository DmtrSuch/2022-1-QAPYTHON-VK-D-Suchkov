{"name": "Navbar with long surname", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nselenium.common.exceptions.InvalidArgumentException: Message: Requested environment is not available", "trace": "config = {'browser': 'chrome', 'url': 'http://app:8087/login'}\n\n    @pytest.fixture(scope='function')\n    def browser(config):\n        url = config['url']\n>       browser = get_driver(config)\n\nconfig     = {'browser': 'chrome', 'url': 'http://app:8087/login'}\nurl        = 'http://app:8087/login'\n\ntmp/code/ui/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntmp/code/ui/conftest.py:61: in get_driver\n    browser = webdriver.Remote(command_executor=f\"http://selenoid:4444/wd/hub\",\n        browser_name = 'chrome'\n        caps       = {'browserName': 'chrome', 'version': '99.0'}\n        config     = {'browser': 'chrome', 'url': 'http://app:8087/login'}\n        options    = <selenium.webdriver.chrome.options.Options object at 0x7f4e04801610>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}\n        command_executor = 'http://selenoid:4444/wd/hub'\n        desired_capabilities = {'browserName': 'chrome', 'version': '99.0'}\n        file_detector = None\n        keep_alive = False\n        options    = <selenium.webdriver.chrome.options.Options object at 0x7f4e04801610>\n        proxy      = None\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}\n        parameters = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': []..., 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n        w3c_caps   = {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platformName': 'any'}, 'firstMatch': [{}]}\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'newSession'\n        params     = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': []..., 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}}\n        response   = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"Requested environment is not available\"}}\\n'}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4e048012e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"Requested environment is not available\"}}\\n'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: Requested environment is not available\n\nexception_class = <class 'selenium.common.exceptions.InvalidArgumentException'>\njson       = <module 'json' from '/usr/local/lib/python3.8/json/__init__.py'>\nmessage    = 'Requested environment is not available'\nresponse   = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"Requested environment is not available\"}}\\n'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4e048012e0>\nstacktrace = None\nstatus     = 'invalid argument'\nvalue      = {'error': 'invalid argument', 'message': 'Requested environment is not available'}\nvalue_json = '{\"value\":{\"error\":\"invalid argument\",\"message\":\"Requested environment is not available\"}}\\n'\n\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: InvalidArgumentException"}, "description": "\n            Navbar with long surname\n            !BUG!\n        ", "parameters": [{"name": "link_name", "value": "<NavbarLinkNames.FLASK: (5,)>"}], "start": 1659982893893, "stop": 1659982893893, "uuid": "312381ea-239f-41e8-9b78-03ae3b8c9255", "historyId": "3d13c634df40c88dc6279f30339e6c15", "testCaseId": "ea91ffb30627d20c95614cf207a1e2f5", "fullName": "ui.test.test_ui.TestMainPage#test_navbar_with_long_surname", "labels": [{"name": "epic", "value": "UI tests"}, {"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "tag", "value": "main"}, {"name": "tag", "value": "noautologin"}, {"name": "parentSuite", "value": "ui.test"}, {"name": "suite", "value": "test_ui"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "00d3b625efa4"}, {"name": "thread", "value": "7-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ui.test.test_ui"}]}