{"name": "Create user with Empty Name, Surname, Username, Password", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='selenoid', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)')))", "trace": "self = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\nmethod = 'POST', url = '/wd/hub/session'\nbody = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\nheaders = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\nretries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = <object object at 0x7f9a28f36660>, pool_timeout = None\nrelease_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'https://selenoid:4444/wd/hub/session'}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n>           httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n_is_ssl_error_message_from_http_proxy = <function HTTPConnectionPool.urlopen.<locals>._is_ssl_error_message_from_http_proxy at 0x7f9a28018280>\nassert_same_host = False\nbody       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\nbody_pos   = None\nchunked    = False\nclean_exit = False\nconn       = None\ndestination_scheme = None\nerr        = None\nheaders    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\nhttp_tunnel_required = False\nis_new_proxy_conn = False\nmethod     = 'POST'\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)\npool_timeout = None\nredirect   = False\nrelease_conn = True\nrelease_this_conn = True\nresponse_kw = {'request_url': 'https://selenoid:4444/wd/hub/session'}\nretries    = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nself       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\ntimeout    = <object object at 0x7f9a28f36660>\ntimeout_obj = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\nurl        = '/wd/hub/session'\n\nusr/local/lib/python3.8/site-packages/urllib3/connectionpool.py:703: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\nconn = <urllib3.connection.HTTPSConnection object at 0x7f9a28002550>\nmethod = 'POST', url = '/wd/hub/session'\ntimeout = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\nchunked = False\nhttplib_request_kw = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}}\ntimeout_obj = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nchunked    = False\nconn       = <urllib3.connection.HTTPSConnection object at 0x7f9a28002550>\nhttplib_request_kw = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}}\nmethod     = 'POST'\nself       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\ntimeout    = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\ntimeout_obj = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\nurl        = '/wd/hub/session'\n\nusr/local/lib/python3.8/site-packages/urllib3/connectionpool.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\nconn = <urllib3.connection.HTTPSConnection object at 0x7f9a28002550>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n        Called right before a request is made, after the socket is created.\n        \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, \"sock\", None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\n__class__  = <class 'urllib3.connectionpool.HTTPSConnectionPool'>\nconn       = <urllib3.connection.HTTPSConnection object at 0x7f9a28002550>\nself       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\n\nusr/local/lib/python3.8/site-packages/urllib3/connectionpool.py:1042: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPSConnection object at 0x7f9a28002550>\n\n    def connect(self):\n        # Add certificate verification\n        self.sock = conn = self._new_conn()\n        hostname = self.host\n        tls_in_tls = False\n    \n        if self._is_using_tunnel():\n            if self.tls_in_tls_required:\n                self.sock = conn = self._connect_tls_proxy(hostname, conn)\n                tls_in_tls = True\n    \n            # Calls self._set_hostport(), so self.host is\n            # self._tunnel_host below.\n            self._tunnel()\n            # Mark this connection as not reusable\n            self.auto_open = 0\n    \n            # Override the host with the one we're requesting data from.\n            hostname = self._tunnel_host\n    \n        server_hostname = hostname\n        if self.server_hostname is not None:\n            server_hostname = self.server_hostname\n    \n        is_time_off = datetime.date.today() < RECENT_DATE\n        if is_time_off:\n            warnings.warn(\n                (\n                    \"System time is way off (before {0}). This will probably \"\n                    \"lead to SSL verification errors\"\n                ).format(RECENT_DATE),\n                SystemTimeWarning,\n            )\n    \n        # Wrap socket using verification with the root certs in\n        # trusted_root_certs\n        default_ssl_context = False\n        if self.ssl_context is None:\n            default_ssl_context = True\n            self.ssl_context = create_urllib3_context(\n                ssl_version=resolve_ssl_version(self.ssl_version),\n                cert_reqs=resolve_cert_reqs(self.cert_reqs),\n            )\n    \n        context = self.ssl_context\n        context.verify_mode = resolve_cert_reqs(self.cert_reqs)\n    \n        # Try to load OS default certs if none are given.\n        # Works well on Windows (requires Python3.4+)\n        if (\n            not self.ca_certs\n            and not self.ca_cert_dir\n            and not self.ca_cert_data\n            and default_ssl_context\n            and hasattr(context, \"load_default_certs\")\n        ):\n            context.load_default_certs()\n    \n>       self.sock = ssl_wrap_socket(\n            sock=conn,\n            keyfile=self.key_file,\n            certfile=self.cert_file,\n            key_password=self.key_password,\n            ca_certs=self.ca_certs,\n            ca_cert_dir=self.ca_cert_dir,\n            ca_cert_data=self.ca_cert_data,\n            server_hostname=server_hostname,\n            ssl_context=context,\n            tls_in_tls=tls_in_tls,\n        )\n\nconn       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\ncontext    = <ssl.SSLContext object at 0x7f9a2809f940>\ndefault_ssl_context = True\nhostname   = 'selenoid'\nis_time_off = False\nself       = <urllib3.connection.HTTPSConnection object at 0x7f9a28002550>\nserver_hostname = 'selenoid'\ntls_in_tls = False\n\nusr/local/lib/python3.8/site-packages/urllib3/connection.py:414: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nkeyfile = None, certfile = None, cert_reqs = None, ca_certs = None\nserver_hostname = 'selenoid', ssl_version = None, ciphers = None\nssl_context = <ssl.SSLContext object at 0x7f9a2809f940>, ca_cert_dir = None\nkey_password = None, ca_cert_data = None, tls_in_tls = False\n\n    def ssl_wrap_socket(\n        sock,\n        keyfile=None,\n        certfile=None,\n        cert_reqs=None,\n        ca_certs=None,\n        server_hostname=None,\n        ssl_version=None,\n        ciphers=None,\n        ssl_context=None,\n        ca_cert_dir=None,\n        key_password=None,\n        ca_cert_data=None,\n        tls_in_tls=False,\n    ):\n        \"\"\"\n        All arguments except for server_hostname, ssl_context, and ca_cert_dir have\n        the same meaning as they do when using :func:`ssl.wrap_socket`.\n    \n        :param server_hostname:\n            When SNI is supported, the expected hostname of the certificate\n        :param ssl_context:\n            A pre-made :class:`SSLContext` object. If none is provided, one will\n            be created using :func:`create_urllib3_context`.\n        :param ciphers:\n            A string of ciphers we wish the client to support.\n        :param ca_cert_dir:\n            A directory containing CA certificates in multiple separate files, as\n            supported by OpenSSL's -CApath flag or the capath argument to\n            SSLContext.load_verify_locations().\n        :param key_password:\n            Optional password if the keyfile is encrypted.\n        :param ca_cert_data:\n            Optional string containing CA certificates in PEM format suitable for\n            passing as the cadata parameter to SSLContext.load_verify_locations()\n        :param tls_in_tls:\n            Use SSLTransport to wrap the existing socket.\n        \"\"\"\n        context = ssl_context\n        if context is None:\n            # Note: This branch of code and all the variables in it are no longer\n            # used by urllib3 itself. We should consider deprecating and removing\n            # this code.\n            context = create_urllib3_context(ssl_version, cert_reqs, ciphers=ciphers)\n    \n        if ca_certs or ca_cert_dir or ca_cert_data:\n            try:\n                context.load_verify_locations(ca_certs, ca_cert_dir, ca_cert_data)\n            except (IOError, OSError) as e:\n                raise SSLError(e)\n    \n        elif ssl_context is None and hasattr(context, \"load_default_certs\"):\n            # try to load OS default certs; works well on Windows (require Python3.4+)\n            context.load_default_certs()\n    \n        # Attempt to detect if we get the goofy behavior of the\n        # keyfile being encrypted and OpenSSL asking for the\n        # passphrase via the terminal and instead error out.\n        if keyfile and key_password is None and _is_key_file_encrypted(keyfile):\n            raise SSLError(\"Client private key is encrypted, password is required\")\n    \n        if certfile:\n            if key_password is None:\n                context.load_cert_chain(certfile, keyfile)\n            else:\n                context.load_cert_chain(certfile, keyfile, key_password)\n    \n        try:\n            if hasattr(context, \"set_alpn_protocols\"):\n                context.set_alpn_protocols(ALPN_PROTOCOLS)\n        except NotImplementedError:  # Defensive: in CI, we always have set_alpn_protocols\n            pass\n    \n        # If we detect server_hostname is an IP address then the SNI\n        # extension should not be used according to RFC3546 Section 3.1\n        use_sni_hostname = server_hostname and not is_ipaddress(server_hostname)\n        # SecureTransport uses server_hostname in certificate verification.\n        send_sni = (use_sni_hostname and HAS_SNI) or (\n            IS_SECURETRANSPORT and server_hostname\n        )\n        # Do not warn the user if server_hostname is an invalid SNI hostname.\n        if not HAS_SNI and use_sni_hostname:\n            warnings.warn(\n                \"An HTTPS request has been made, but the SNI (Server Name \"\n                \"Indication) extension to TLS is not available on this platform. \"\n                \"This may cause the server to present an incorrect TLS \"\n                \"certificate, which can cause validation failures. You can upgrade to \"\n                \"a newer version of Python to solve this. For more information, see \"\n                \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n                \"#ssl-warnings\",\n                SNIMissingWarning,\n            )\n    \n        if send_sni:\n>           ssl_sock = _ssl_wrap_socket_impl(\n                sock, context, tls_in_tls, server_hostname=server_hostname\n            )\n\nca_cert_data = None\nca_cert_dir = None\nca_certs   = None\ncert_reqs  = None\ncertfile   = None\nciphers    = None\ncontext    = <ssl.SSLContext object at 0x7f9a2809f940>\nkey_password = None\nkeyfile    = None\nsend_sni   = True\nserver_hostname = 'selenoid'\nsock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nssl_context = <ssl.SSLContext object at 0x7f9a2809f940>\nssl_version = None\ntls_in_tls = False\nuse_sni_hostname = True\n\nusr/local/lib/python3.8/site-packages/urllib3/util/ssl_.py:449: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nssl_context = <ssl.SSLContext object at 0x7f9a2809f940>, tls_in_tls = False\nserver_hostname = 'selenoid'\n\n    def _ssl_wrap_socket_impl(sock, ssl_context, tls_in_tls, server_hostname=None):\n        if tls_in_tls:\n            if not SSLTransport:\n                # Import error, ssl is not available.\n                raise ProxySchemeUnsupported(\n                    \"TLS in TLS requires support for the 'ssl' module\"\n                )\n    \n            SSLTransport._validate_ssl_context_for_tls_in_tls(ssl_context)\n            return SSLTransport(sock, ssl_context, server_hostname)\n    \n        if server_hostname:\n>           return ssl_context.wrap_socket(sock, server_hostname=server_hostname)\n\nserver_hostname = 'selenoid'\nsock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nssl_context = <ssl.SSLContext object at 0x7f9a2809f940>\ntls_in_tls = False\n\nusr/local/lib/python3.8/site-packages/urllib3/util/ssl_.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLContext object at 0x7f9a2809f940>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'selenoid', session = None\n\n    def wrap_socket(self, sock, server_side=False,\n                    do_handshake_on_connect=True,\n                    suppress_ragged_eofs=True,\n                    server_hostname=None, session=None):\n        # SSLSocket class handles server_hostname encoding before it calls\n        # ctx._wrap_socket()\n>       return self.sslsocket_class._create(\n            sock=sock,\n            server_side=server_side,\n            do_handshake_on_connect=do_handshake_on_connect,\n            suppress_ragged_eofs=suppress_ragged_eofs,\n            server_hostname=server_hostname,\n            context=self,\n            session=session\n        )\n\ndo_handshake_on_connect = True\nself       = <ssl.SSLContext object at 0x7f9a2809f940>\nserver_hostname = 'selenoid'\nserver_side = False\nsession    = None\nsock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuppress_ragged_eofs = True\n\nusr/local/lib/python3.8/ssl.py:500: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'ssl.SSLSocket'>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'selenoid'\ncontext = <ssl.SSLContext object at 0x7f9a2809f940>, session = None\n\n    @classmethod\n    def _create(cls, sock, server_side=False, do_handshake_on_connect=True,\n                suppress_ragged_eofs=True, server_hostname=None,\n                context=None, session=None):\n        if sock.getsockopt(SOL_SOCKET, SO_TYPE) != SOCK_STREAM:\n            raise NotImplementedError(\"only stream sockets are supported\")\n        if server_side:\n            if server_hostname:\n                raise ValueError(\"server_hostname can only be specified \"\n                                 \"in client mode\")\n            if session is not None:\n                raise ValueError(\"session can only be specified in \"\n                                 \"client mode\")\n        if context.check_hostname and not server_hostname:\n            raise ValueError(\"check_hostname requires server_hostname\")\n    \n        kwargs = dict(\n            family=sock.family, type=sock.type, proto=sock.proto,\n            fileno=sock.fileno()\n        )\n        self = cls.__new__(cls, **kwargs)\n        super(SSLSocket, self).__init__(**kwargs)\n        self.settimeout(sock.gettimeout())\n        sock.detach()\n    \n        self._context = context\n        self._session = session\n        self._closed = False\n        self._sslobj = None\n        self.server_side = server_side\n        self.server_hostname = context._encode_hostname(server_hostname)\n        self.do_handshake_on_connect = do_handshake_on_connect\n        self.suppress_ragged_eofs = suppress_ragged_eofs\n    \n        # See if we are connected\n        try:\n            self.getpeername()\n        except OSError as e:\n            if e.errno != errno.ENOTCONN:\n                raise\n            connected = False\n        else:\n            connected = True\n    \n        self._connected = connected\n        if connected:\n            # create the SSL object\n            try:\n                self._sslobj = self._context._wrap_socket(\n                    self, server_side, self.server_hostname,\n                    owner=self, session=self._session,\n                )\n                if do_handshake_on_connect:\n                    timeout = self.gettimeout()\n                    if timeout == 0.0:\n                        # non-blocking\n                        raise ValueError(\"do_handshake_on_connect should not be specified for non-blocking sockets\")\n>                   self.do_handshake()\n\n__class__  = <class 'ssl.SSLSocket'>\ncls        = <class 'ssl.SSLSocket'>\nconnected  = True\ncontext    = <ssl.SSLContext object at 0x7f9a2809f940>\ndo_handshake_on_connect = True\nkwargs     = {'family': <AddressFamily.AF_INET: 2>, 'fileno': 3, 'proto': 6, 'type': <SocketKind.SOCK_STREAM: 1>}\nself       = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nserver_hostname = 'selenoid'\nserver_side = False\nsession    = None\nsock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuppress_ragged_eofs = True\ntimeout    = None\n\nusr/local/lib/python3.8/ssl.py:1040: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)\n\nblock      = False\nself       = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\ntimeout    = None\n\nusr/local/lib/python3.8/ssl.py:1309: SSLError\n\nDuring handling of the above exception, another exception occurred:\n\nconfig = {'browser': 'chrome', 'url': 'http://app:8087/login'}\n\n    @pytest.fixture(scope='function')\n    def browser(config):\n        url = config['url']\n>       browser = get_driver(config)\n\nconfig     = {'browser': 'chrome', 'url': 'http://app:8087/login'}\nurl        = 'http://app:8087/login'\n\ntmp/code/ui/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntmp/code/ui/conftest.py:61: in get_driver\n    browser = webdriver.Remote(command_executor=f\"https://selenoid:4444/wd/hub\",\n        browser_name = 'chrome'\n        caps       = {'browserName': 'chrome', 'version': '99.0'}\n        config     = {'browser': 'chrome', 'url': 'http://app:8087/login'}\n        options    = <selenium.webdriver.chrome.options.Options object at 0x7f9a27ee31c0>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}\n        command_executor = 'https://selenoid:4444/wd/hub'\n        desired_capabilities = {'browserName': 'chrome', 'version': '99.0'}\n        file_detector = None\n        keep_alive = False\n        options    = <selenium.webdriver.chrome.options.Options object at 0x7f9a27ee31c0>\n        proxy      = None\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}\n        parameters = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': []..., 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n        w3c_caps   = {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platformName': 'any'}, 'firstMatch': [{}]}\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:319: in execute\n    response = self.command_executor.execute(driver_command, params)\n        driver_command = 'newSession'\n        params     = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': []..., 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/remote_connection.py:374: in execute\n    return self._request(command_info[0], url, body=data)\n        command    = 'newSession'\n        command_info = ('POST', '/session')\n        data       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\n        params     = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': []..., 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}}\n        path       = '/session'\n        self       = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x7f9a27ee38e0>\n        url        = 'https://selenoid:4444/wd/hub/session'\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/remote_connection.py:402: in _request\n    resp = http.request(method, url, body=body, headers=headers)\n        body       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        http       = <urllib3.poolmanager.PoolManager object at 0x7f9a27ee35e0>\n        method     = 'POST'\n        parsed_url = ParseResult(scheme='https', netloc='selenoid:4444', path='/wd/hub/session', params='', query='', fragment='')\n        resp       = None\n        self       = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x7f9a27ee38e0>\n        url        = 'https://selenoid:4444/wd/hub/session'\nusr/local/lib/python3.8/site-packages/urllib3/request.py:78: in request\n    return self.request_encode_body(\n        fields     = None\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        method     = 'POST'\n        self       = <urllib3.poolmanager.PoolManager object at 0x7f9a27ee35e0>\n        url        = 'https://selenoid:4444/wd/hub/session'\n        urlopen_kw = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...Switches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}', 'request_url': 'https://selenoid:4444/wd/hub/session'}\nusr/local/lib/python3.8/site-packages/urllib3/request.py:170: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n        encode_multipart = True\n        extra_kw   = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...harset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}, 'request_url': 'https://selenoid:4444/wd/hub/session'}\n        fields     = None\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        method     = 'POST'\n        multipart_boundary = None\n        self       = <urllib3.poolmanager.PoolManager object at 0x7f9a27ee35e0>\n        url        = 'https://selenoid:4444/wd/hub/session'\n        urlopen_kw = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...Switches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}', 'request_url': 'https://selenoid:4444/wd/hub/session'}\nusr/local/lib/python3.8/site-packages/urllib3/poolmanager.py:376: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n        conn       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\n        kw         = {'assert_same_host': False, 'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"b...tent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}, 'redirect': False, ...}\n        method     = 'POST'\n        redirect   = True\n        self       = <urllib3.poolmanager.PoolManager object at 0x7f9a27ee35e0>\n        u          = Url(scheme='https', auth=None, host='selenoid', port=4444, path='/wd/hub/session', query=None, fragment=None)\n        url        = 'https://selenoid:4444/wd/hub/session'\nusr/local/lib/python3.8/site-packages/urllib3/connectionpool.py:815: in urlopen\n    return self.urlopen(\n        _is_ssl_error_message_from_http_proxy = <function HTTPConnectionPool.urlopen.<locals>._is_ssl_error_message_from_http_proxy at 0x7f9a280180d0>\n        assert_same_host = False\n        body       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\n        body_pos   = None\n        chunked    = False\n        clean_exit = False\n        conn       = None\n        destination_scheme = None\n        err        = SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)'))\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        http_tunnel_required = False\n        is_new_proxy_conn = False\n        method     = 'POST'\n        parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)\n        pool_timeout = None\n        redirect   = False\n        release_conn = True\n        release_this_conn = True\n        response_kw = {'request_url': 'https://selenoid:4444/wd/hub/session'}\n        retries    = Retry(total=2, connect=None, read=None, redirect=None, status=None)\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\n        timeout    = <object object at 0x7f9a28f36660>\n        timeout_obj = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\n        url        = '/wd/hub/session'\nusr/local/lib/python3.8/site-packages/urllib3/connectionpool.py:815: in urlopen\n    return self.urlopen(\n        _is_ssl_error_message_from_http_proxy = <function HTTPConnectionPool.urlopen.<locals>._is_ssl_error_message_from_http_proxy at 0x7f9a28018430>\n        assert_same_host = False\n        body       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\n        body_pos   = None\n        chunked    = False\n        clean_exit = False\n        conn       = None\n        destination_scheme = None\n        err        = SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)'))\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        http_tunnel_required = False\n        is_new_proxy_conn = False\n        method     = 'POST'\n        parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)\n        pool_timeout = None\n        redirect   = False\n        release_conn = True\n        release_this_conn = True\n        response_kw = {'request_url': 'https://selenoid:4444/wd/hub/session'}\n        retries    = Retry(total=1, connect=None, read=None, redirect=None, status=None)\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\n        timeout    = <object object at 0x7f9a28f36660>\n        timeout_obj = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\n        url        = '/wd/hub/session'\nusr/local/lib/python3.8/site-packages/urllib3/connectionpool.py:815: in urlopen\n    return self.urlopen(\n        _is_ssl_error_message_from_http_proxy = <function HTTPConnectionPool.urlopen.<locals>._is_ssl_error_message_from_http_proxy at 0x7f9a280184c0>\n        assert_same_host = False\n        body       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\n        body_pos   = None\n        chunked    = False\n        clean_exit = False\n        conn       = None\n        destination_scheme = None\n        err        = SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)'))\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        http_tunnel_required = False\n        is_new_proxy_conn = False\n        method     = 'POST'\n        parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)\n        pool_timeout = None\n        redirect   = False\n        release_conn = True\n        release_this_conn = True\n        response_kw = {'request_url': 'https://selenoid:4444/wd/hub/session'}\n        retries    = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\n        timeout    = <object object at 0x7f9a28f36660>\n        timeout_obj = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\n        url        = '/wd/hub/session'\nusr/local/lib/python3.8/site-packages/urllib3/connectionpool.py:787: in urlopen\n    retries = retries.increment(\n        _is_ssl_error_message_from_http_proxy = <function HTTPConnectionPool.urlopen.<locals>._is_ssl_error_message_from_http_proxy at 0x7f9a28018280>\n        assert_same_host = False\n        body       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\n        body_pos   = None\n        chunked    = False\n        clean_exit = False\n        conn       = None\n        destination_scheme = None\n        err        = None\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        http_tunnel_required = False\n        is_new_proxy_conn = False\n        method     = 'POST'\n        parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)\n        pool_timeout = None\n        redirect   = False\n        release_conn = True\n        release_this_conn = True\n        response_kw = {'request_url': 'https://selenoid:4444/wd/hub/session'}\n        retries    = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\n        timeout    = <object object at 0x7f9a28f36660>\n        timeout_obj = Timeout(connect=<object object at 0x7f9a2ae6ebb0>, read=<object object at 0x7f9a2ae6ebb0>, total=None)\n        url        = '/wd/hub/session'\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nmethod = 'POST', url = '/wd/hub/session', response = None\nerror = SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)'))\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\n_stacktrace = <traceback object at 0x7f9a27ea9300>\n\n    def increment(\n        self,\n        method=None,\n        url=None,\n        response=None,\n        error=None,\n        _pool=None,\n        _stacktrace=None,\n    ):\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='selenoid', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)')))\n\n_pool      = <urllib3.connectionpool.HTTPSConnectionPool object at 0x7f9a27ee3970>\n_stacktrace = <traceback object at 0x7f9a27ea9300>\ncause      = 'unknown'\nconnect    = None\nerror      = SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)'))\nhistory    = (RequestHistory(method='POST', url='/wd/hub/session', error=SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong ve...r(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1131)')), status=None, redirect_location=None))\nmethod     = 'POST'\nnew_retry  = Retry(total=-1, connect=None, read=None, redirect=None, status=None)\nother      = None\nread       = None\nredirect   = None\nredirect_location = None\nresponse   = None\nself       = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nstatus     = None\nstatus_count = None\ntotal      = -1\nurl        = '/wd/hub/session'\n\nusr/local/lib/python3.8/site-packages/urllib3/util/retry.py:592: MaxRetryError"}, "description": "\n            incorrect Name, Surname, Username, Password\n        ", "attachments": [{"name": "log", "source": "5abcd4f4-4c00-441c-b3e6-430e934bfa8e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user", "value": "User(name='BUQ4RtD77k', surname='7JLW8CkHln', Midddleename='2BZ2quUdnf', username='TZc3coReiJ', email='feG9Un8yfVo@m.r', password='2g0K8XwtpM')"}, {"name": "locator", "value": "('id', 'password')"}], "start": 1659983629080, "stop": 1659983629080, "uuid": "d806feac-9592-41c4-924e-8dd286ce578e", "historyId": "9191c38f80ab0f478568fbcfaf335d10", "testCaseId": "c48e50629620828d688769089adfabc3", "fullName": "ui.test.test_ui.TestRegPage#test_create_user_empty", "labels": [{"name": "epic", "value": "UI tests"}, {"name": "tag", "value": "reg"}, {"name": "tag", "value": "noautologin"}, {"name": "parentSuite", "value": "ui.test"}, {"name": "suite", "value": "test_ui"}, {"name": "subSuite", "value": "TestRegPage"}, {"name": "host", "value": "00d3b625efa4"}, {"name": "thread", "value": "8-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ui.test.test_ui"}]}