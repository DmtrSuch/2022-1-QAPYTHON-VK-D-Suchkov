{"name": "Go block links", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.LocationValueError: No host specified.", "trace": "config = {'browser': 'chrome', 'url': 'http://app:8087/login'}\n\n    @pytest.fixture(scope='function')\n    def browser(config):\n        url = config['url']\n>       browser = get_driver(config)\n\nconfig     = {'browser': 'chrome', 'url': 'http://app:8087/login'}\nurl        = 'http://app:8087/login'\n\ntmp/code/ui/conftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntmp/code/ui/conftest.py:61: in get_driver\n    browser = webdriver.Remote(command_executor=f\"selenoid:4444/wd/hub\",\n        browser_name = 'chrome'\n        caps       = {'browserName': 'chrome', 'version': '99.0'}\n        config     = {'browser': 'chrome', 'url': 'http://app:8087/login'}\n        options    = <selenium.webdriver.chrome.options.Options object at 0x7f7dd1aacb20>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}\n        command_executor = 'selenoid:4444/wd/hub'\n        desired_capabilities = {'browserName': 'chrome', 'version': '99.0'}\n        file_detector = None\n        keep_alive = False\n        options    = <selenium.webdriver.chrome.options.Options object at 0x7f7dd1aacb20>\n        proxy      = None\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}\n        parameters = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': []..., 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n        w3c_caps   = {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platformName': 'any'}, 'firstMatch': [{}]}\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:319: in execute\n    response = self.command_executor.execute(driver_command, params)\n        driver_command = 'newSession'\n        params     = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': []..., 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/remote_connection.py:374: in execute\n    return self._request(command_info[0], url, body=data)\n        command    = 'newSession'\n        command_info = ('POST', '/session')\n        data       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\n        params     = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '99.0', 'goog:chromeOptions': {'args': []..., 'goog:chromeOptions': {'args': [], 'excludeSwitches': ['enable-logging'], 'extensions': []}, 'platform': 'ANY', ...}}\n        path       = '/session'\n        self       = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x7f7dd1aac910>\n        url        = 'selenoid:4444/wd/hub/session'\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/remote_connection.py:402: in _request\n    resp = http.request(method, url, body=body, headers=headers)\n        body       = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"platformNam...browserVersion\": \"99.0\", \"goog:chromeOptions\": {\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}'\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        http       = <urllib3.poolmanager.PoolManager object at 0x7f7dd1aac970>\n        method     = 'POST'\n        parsed_url = ParseResult(scheme='selenoid', netloc='', path='4444/wd/hub/session', params='', query='', fragment='')\n        resp       = None\n        self       = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x7f7dd1aac910>\n        url        = 'selenoid:4444/wd/hub/session'\nusr/local/lib/python3.8/site-packages/urllib3/request.py:78: in request\n    return self.request_encode_body(\n        fields     = None\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        method     = 'POST'\n        self       = <urllib3.poolmanager.PoolManager object at 0x7f7dd1aac970>\n        url        = 'selenoid:4444/wd/hub/session'\n        urlopen_kw = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}', 'request_url': 'selenoid:4444/wd/hub/session'}\nusr/local/lib/python3.8/site-packages/urllib3/request.py:170: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n        encode_multipart = True\n        extra_kw   = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...n/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}, 'request_url': 'selenoid:4444/wd/hub/session'}\n        fields     = None\n        headers    = {'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}\n        method     = 'POST'\n        multipart_boundary = None\n        self       = <urllib3.poolmanager.PoolManager object at 0x7f7dd1aac970>\n        url        = 'selenoid:4444/wd/hub/session'\n        urlopen_kw = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...\"excludeSwitches\": [\"enable-logging\"], \"extensions\": [], \"args\": []}}}', 'request_url': 'selenoid:4444/wd/hub/session'}\nusr/local/lib/python3.8/site-packages/urllib3/poolmanager.py:365: in urlopen\n    conn = self.connection_from_host(u.host, port=u.port, scheme=u.scheme)\n        kw         = {'body': '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"browserVersion\": \"99.0\", \"pl...n/json;charset=UTF-8', 'User-Agent': 'selenium/3.141.0 (python linux)'}, 'request_url': 'selenoid:4444/wd/hub/session'}\n        method     = 'POST'\n        redirect   = True\n        self       = <urllib3.poolmanager.PoolManager object at 0x7f7dd1aac970>\n        u          = Url(scheme='selenoid', auth=None, host=None, port=None, path='/4444/wd/hub/session', query=None, fragment=None)\n        url        = 'selenoid:4444/wd/hub/session'\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.poolmanager.PoolManager object at 0x7f7dd1aac970>, host = None\nport = None, scheme = 'selenoid', pool_kwargs = None\n\n    def connection_from_host(self, host, port=None, scheme=\"http\", pool_kwargs=None):\n        \"\"\"\n        Get a :class:`urllib3.connectionpool.ConnectionPool` based on the host, port, and scheme.\n    \n        If ``port`` isn't given, it will be derived from the ``scheme`` using\n        ``urllib3.connectionpool.port_by_scheme``. If ``pool_kwargs`` is\n        provided, it is merged with the instance's ``connection_pool_kw``\n        variable and used to create the new connection pool, if one is\n        needed.\n        \"\"\"\n    \n        if not host:\n>           raise LocationValueError(\"No host specified.\")\nE           urllib3.exceptions.LocationValueError: No host specified.\n\nhost       = None\npool_kwargs = None\nport       = None\nscheme     = 'selenoid'\nself       = <urllib3.poolmanager.PoolManager object at 0x7f7dd1aac970>\n\nusr/local/lib/python3.8/site-packages/urllib3/poolmanager.py:237: LocationValueError"}, "description": "\n            Check block links\n        ", "parameters": [{"name": "link_name", "value": "<BlockLinkNames.API: (1,)>"}], "start": 1659983582408, "stop": 1659983582408, "uuid": "344d68e4-39cc-41f9-8f62-ce4ee404c53e", "historyId": "ff4f07a4d203ade1554665ca20bfc387", "testCaseId": "1e1c20f9493fb3dd8a8ecfb537a3dc18", "fullName": "ui.test.test_ui.TestMainPage#test_go_block_link", "labels": [{"name": "epic", "value": "UI tests"}, {"name": "tag", "value": "main"}, {"name": "parentSuite", "value": "ui.test"}, {"name": "suite", "value": "test_ui"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "00d3b625efa4"}, {"name": "thread", "value": "8-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ui.test.test_ui"}]}